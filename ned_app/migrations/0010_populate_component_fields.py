# Generated by Django 5.2.5 on 2025-09-03 03:41

import json
import os
from django.db import migrations
from django.conf import settings


def populate_new_component_fields(apps, schema_editor):
    """
    Populate the new component fields (component_id, major_group, group, element, subelement)
    by parsing existing Component IDs and looking up descriptions in nistir_labels.json.
    """
    # Get the historical Component model
    Component = apps.get_model('ned_app', 'Component')

    # Load the NISTIR labels data
    labels_path = os.path.join(
        settings.BASE_DIR, 'ned_app', 'schemas', 'nistir_labels.json'
    )

    try:
        with open(labels_path, 'r') as f:
            labels_data = json.load(f)
    except FileNotFoundError:
        print(f'Warning: NISTIR labels file not found at {labels_path}')
        return
    except json.JSONDecodeError as e:
        print(f'Warning: Invalid JSON in NISTIR labels file: {e}')
        return

    # Iterate through all existing Component objects
    for component in Component.objects.all():
        old_id = component.id

        # Parse the old ID to extract NISTIR levels
        # Old format: 'A1011' -> New format: 'A.10.1.1'
        if len(old_id) >= 5:
            # Extract parts from old format
            l1 = old_id[0]  # 'A'
            l2 = old_id[1:3]  # '10'
            l3 = old_id[3]  # '1'
            l4 = old_id[4]  # '1'
            l5 = old_id[5:]

            # Generate new dotted component_id
            new_component_id = f'{l1}.{l2}.{l3}.{l4}{l5 if l5 else ""}'
            component.component_id = new_component_id

            # Generate hierarchy field data
            # Level 1: Major Group (e.g., 'A')
            major_group_key = l1
            if major_group_key in labels_data:
                component.major_group = f'{l1} - {labels_data[major_group_key]}'

            # Level 2: Group (e.g., 'A.10')
            group_key = f'{l1}.{l2}'
            if group_key in labels_data:
                component.group = f'{l2} - {labels_data[group_key]}'

            # Level 3: Element (e.g., 'A.10.1')
            element_key = f'{l1}.{l2}.{l3}'
            if element_key in labels_data:
                component.element = f'{l3} - {labels_data[element_key]}'

            # Level 4: Subelement (e.g., 'A.10.1.1')
            subelement_key = f'{l1}.{l2}.{l3}.{l4}'
            if subelement_key in labels_data:
                component.subelement = f'{l4} - {labels_data[subelement_key]}'

            # Save the updated component
            component.save()
            print(f'Updated component {old_id} -> {new_component_id}')
        else:
            print(f'Warning: Component {old_id} has invalid format (too short)')


def reverse_populate_component_fields(apps, schema_editor):
    """
    Reverse function to clear the new component fields.
    """
    Component = apps.get_model('ned_app', 'Component')

    for component in Component.objects.all():
        component.component_id = None
        component.major_group = None
        component.group = None
        component.element = None
        component.subelement = None
        component.save()


class Migration(migrations.Migration):
    dependencies = [
        ('ned_app', '0009_component_component_id_component_element_and_more'),
    ]

    operations = [
        migrations.RunPython(
            populate_new_component_fields,
            reverse_populate_component_fields,
        ),
    ]
