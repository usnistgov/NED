# Generated by Django 5.2.5 on 2025-08-27 16:52

import ned_app.validators
from django.db import migrations, models
from django.core.exceptions import ValidationError


def validate_existing_component_ids(apps, schema_editor):
    """
    Validate all existing Component records against the NISTIR schema.

    This function runs before any schema changes to ensure all existing
    component IDs are valid.
    """
    Component = apps.get_model('ned_app', 'Component')

    # Import the validator function
    from ned_app.validators import validate_nistir_component_id

    for component in Component.objects.all():
        try:
            validate_nistir_component_id(component.id)
        except ValidationError as e:
            raise ValidationError(
                f'Migration failed: Component with ID "{component.id}" '
                f'is invalid according to NISTIR schema: {e}'
            )


def reverse_validate_existing_component_ids(apps, schema_editor):
    """
    Reverse function for the validation step - no action needed.
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('ned_app', '0006_alter_reference_csl_data_alter_reference_title'),
    ]

    operations = [
        migrations.RunPython(
            validate_existing_component_ids,
            reverse_validate_existing_component_ids,
        ),
        migrations.RemoveField(
            model_name='component',
            name='nistir_subelement',
        ),
        migrations.AlterField(
            model_name='component',
            name='id',
            field=models.CharField(
                max_length=10,
                primary_key=True,
                serialize=False,
                validators=[ned_app.validators.validate_nistir_component_id],
                verbose_name='id',
            ),
        ),
    ]
