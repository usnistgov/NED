# Generated by Django 5.2.5 on 2025-09-03 02:56

import json
import os
from django.core.exceptions import ValidationError
from django.db import migrations, models


# Embedded NISTIR schema
EMBEDDED_NISTIR_SCHEMA = {
    'A': {
        '10': {
            '1': {'1': {}, '2': {}, '3': {}},
            '2': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '9': {},
            },
            '3': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}},
        },
        '20': {
            '1': {'1': {}, '2': {}, '3': {}},
            '2': {'1': {}, '2': {}, '3': {}, '4': {}},
        },
    },
    'B': {
        '10': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '9': {}},
            '2': {'1': {}, '2': {}, '3': {}, '9': {}},
        },
        '20': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}},
            '2': {'1': {}, '2': {}, '3': {}},
            '3': {'1': {}, '2': {}, '3': {}, '4': {}, '9': {}},
        },
        '30': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}},
            '2': {'1': {}, '2': {}, '3': {}},
        },
    },
    'C': {
        '10': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
            '2': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
            '3': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
        },
        '20': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}},
            '2': {'1': {}, '2': {}, '3': {}},
        },
        '30': {
            '1': {'1': {}, '2': {}, '3': {}},
            '2': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
            '3': {'1': {}, '2': {}, '3': {}},
        },
    },
    'D': {
        '10': {
            '1': {'1': {}, '2': {}, '3': {}},
            '2': {'1': {}, '2': {}},
            '9': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '8': {},
            },
        },
        '20': {
            '1': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '8': {},
                '9': {},
            },
            '2': {'1': {}, '2': {}, '3': {}},
            '3': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}},
            '4': {'1': {}, '2': {}, '3': {}, '4': {}},
            '9': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '9': {}},
        },
        '30': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
            '2': {'1': {}, '2': {}, '3': {}, '4': {}},
            '3': {'1': {}, '2': {}},
            '4': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
            '5': {'1': {}, '2': {}},
            '6': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '8': {},
                '9': {},
            },
            '7': {'1': {}, '2': {}, '3': {}, '9': {}},
            '9': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '7': {}},
        },
        '40': {
            '1': {'1': {}, '2': {}, '3': {}},
            '2': {'1': {}, '2': {}, '3': {}, '4': {}},
            '3': {'1': {}, '2': {}},
            '9': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}},
        },
        '50': {
            '1': {'1': {}, '2': {}},
            '2': {'1': {}, '2': {}},
            '3': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '8': {},
                '9': {},
            },
            '9': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}},
        },
    },
    'E': {
        '10': {
            '1': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '8': {},
            },
            '2': {
                '1': {},
                '2': {},
                '3': {},
                '4': {},
                '5': {},
                '6': {},
                '7': {},
                '8': {},
                '9': {},
            },
            '3': {'1': {}, '2': {}, '3': {}, '9': {}},
            '9': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '9': {}},
        },
        '20': {
            '1': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}},
            '2': {'1': {}, '2': {}, '3': {}, '4': {}},
        },
    },
    'F': {
        '10': {
            '1': {'1': {}, '2': {}, '3': {}},
            '2': {'1': {}, '2': {}, '3': {}},
            '3': {'1': {}, '2': {}, '3': {}, '4': {}, '9': {}},
            '4': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '9': {}},
            '5': {'1': {}, '2': {}, '9': {}},
        },
        '20': {'1': {'1': {}, '2': {}}, '2': {'1': {}, '2': {}}},
    },
    'G': {
        '10': {'1': {}, '2': {}, '3': {}, '4': {}},
        '20': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}},
        '30': {'1': {}, '2': {}, '3': {}, '4': {}, '5': {}, '6': {}, '9': {}},
        '40': {'1': {}, '2': {}, '3': {}, '9': {}},
        '90': {'1': {}, '9': {}},
    },
}


# Global variable to cache the schema for efficiency
_nistir_schema = None


def _load_nistir_schema():
    """
    Load the NISTIR schema from embedded data. Cache it globally for efficiency.

    Returns:
        dict: The NISTIR schema dictionary
    """
    global _nistir_schema
    if _nistir_schema is None:
        _nistir_schema = EMBEDDED_NISTIR_SCHEMA
    return _nistir_schema


def validate_nistir_component_id(component_id):
    """
    Validate a NISTIR component ID against the hierarchical schema.

    The validator parses the 4-level NISTIR portion of a dotted ID string and
    traverses the NISTIR schema structure. For example, from 'B.20.1.1.A',
    it isolates the parts ['B', '20', '1', '1'] and validates each level exists.

    Args:
        component_id (str): The component ID to validate (e.g., 'A.10.1.1')

    Raises:
        ValidationError: If the component ID is invalid at any hierarchical level
    """
    if not isinstance(component_id, str):
        raise ValidationError('Component ID must be a string')

    # Parse the dotted ID to get the 4-level NISTIR parts
    parts = component_id.split('.')

    # We need at least 4 parts for a complete NISTIR ID
    if len(parts) < 4:
        raise ValidationError(
            f'Component ID "{component_id}" must have at least 4 NISTIR levels (e.g., A.10.1.1)'
        )

    # Extract the first 4 parts (NISTIR hierarchy)
    nistir_parts = parts[:4]

    # Load the schema
    schema = _load_nistir_schema()

    # Step 1: Check Level 1 (major group, e.g., 'A')
    level1_key = nistir_parts[0]
    if level1_key not in schema:
        raise ValidationError(
            f'Invalid component ID "{component_id}": '
            f'major group "{level1_key}" not found in NISTIR taxonomy'
        )

    # Step 2: Check Level 2 (group, e.g., '10')
    level2_key = nistir_parts[1]
    if level2_key not in schema[level1_key]:
        raise ValidationError(
            f'Invalid component ID "{component_id}": '
            f'group "{level2_key}" not found under major group "{level1_key}" in NISTIR taxonomy'
        )

    # Step 3: Check Level 3 (element, e.g., '1')
    level3_key = nistir_parts[2]
    if level3_key not in schema[level1_key][level2_key]:
        raise ValidationError(
            f'Invalid component ID "{component_id}": '
            f'element "{level3_key}" not found under group "{level1_key}.{level2_key}" in NISTIR taxonomy'
        )

    # Step 4: Check Level 4 (subelement, e.g., '1')
    level4_key = nistir_parts[3]
    if level4_key not in schema[level1_key][level2_key][level3_key]:
        raise ValidationError(
            f'Invalid component ID "{component_id}": '
            f'subelement "{level4_key}" not found under element "{level1_key}.{level2_key}.{level3_key}" in NISTIR taxonomy'
        )


class Migration(migrations.Migration):
    dependencies = [
        ('ned_app', '0008_remove_nistirgroupelement_major_group_element_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='component',
            name='component_id',
            field=models.CharField(
                blank=True,
                help_text='Component ID including NISTIR identifiers (e.g., A.10.1.1).',
                max_length=20,
                null=True,
                unique=True,
                validators=[validate_nistir_component_id],
                verbose_name='component id',
            ),
        ),
        migrations.AddField(
            model_name='component',
            name='element',
            field=models.CharField(
                blank=True,
                db_index=True,
                editable=False,
                help_text='NISTIR element ID and description.',
                max_length=255,
                null=True,
                verbose_name='element',
            ),
        ),
        migrations.AddField(
            model_name='component',
            name='group',
            field=models.CharField(
                blank=True,
                db_index=True,
                editable=False,
                help_text='NISTIR group ID and description.',
                max_length=255,
                null=True,
                verbose_name='group',
            ),
        ),
        migrations.AddField(
            model_name='component',
            name='major_group',
            field=models.CharField(
                blank=True,
                db_index=True,
                editable=False,
                help_text='NISTIR major group ID and description.',
                max_length=255,
                null=True,
                verbose_name='major group',
            ),
        ),
        migrations.AddField(
            model_name='component',
            name='subelement',
            field=models.CharField(
                blank=True,
                db_index=True,
                editable=False,
                help_text='NISTIR subelement ID and description.',
                max_length=255,
                null=True,
                verbose_name='subelement',
            ),
        ),
    ]
